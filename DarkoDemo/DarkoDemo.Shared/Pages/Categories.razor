@attribute [Route(Routes.Admin.Categories)]

@inject CatalogApiClient CatalogApi
@inject IDialogService Dialog

<PageTitle>Customers</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Categories</MudText>

<Loader ShowIfNull="categories" />

@if (categories is not null && categories.Any())
{
    <MudDataGrid Items="@categories" Outlined="true">
        <Columns>
            <PropertyColumn Property="x => x.Name" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudButton OnClick="() => DeleteCategory(context.Item.Id, context.Item.Name)" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Error" DropShadow="false">Delete</MudButton>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}

<MudToolBar Gutters="false">
    <MudIconButton Variant="Variant.Filled"
                   DropShadow="false"
                   Color="Color.Primary"
                   Icon="@Icons.Material.Filled.Add"
                   OnClick="AddCategory" />
</MudToolBar>


@code {
    private IEnumerable<Category>? categories;

    protected override async Task OnInitializedAsync()
    {
        categories = await CatalogApi.ReadCategories();
    }

    private async Task AddCategory()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters<AddCategoryDialog> { { x => x.Category, new CategoryWrite() } };
        var dialog = await Dialog.ShowAsync<AddCategoryDialog>("Add new category", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            if (result.Data is not null)
            {
                await CatalogApi.AddCategory((CategoryWrite)result.Data);
                categories = await CatalogApi.ReadCategories();
            }
        }
    }

    private async Task DeleteCategory(Guid id, string name)
    {
        if (await Dialog.ShowMessageBox("Delete", $"Do you want to delete category {name}?", "Yes", "No") == true)
        {
            await CatalogApi.DeleteCategory(id);
            categories = await CatalogApi.ReadCategories();
        }
    }
}