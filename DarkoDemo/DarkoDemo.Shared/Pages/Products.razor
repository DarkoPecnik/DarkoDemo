@attribute [Route(Routes.Admin.Products)]

@inject CatalogApiClient CatalogApi
@inject IDialogService Dialog

<PageTitle>Products</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Products</MudText>

<Loader ShowIfNull="products" />

@if (products is not null && products.Any())
{
    <MudDataGrid Items="@products" Outlined="true">
        <Columns>
            <PropertyColumn Property="x => x.Name" />
            <PropertyColumn Property="x => x.Price" Format="C" />
            <PropertyColumn Property="x => x.StockQuantity" Title="Stock Quantity" />
            <TemplateColumn Title="Categories">
                <CellTemplate>
                    @foreach (var item in context.Item.Categories)
                    {
                        <MudChip T="string" Variant="Variant.Outlined">@item.Name</MudChip>
                    }
                </CellTemplate>
            </TemplateColumn>
             <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudButton OnClick="() => DeleteProduct(context.Item.Id, context.Item.Name)" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Error" DropShadow="false">Delete</MudButton>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}

<MudToolBar Gutters="false">
    <MudIconButton Variant="Variant.Filled"
                   DropShadow="false"
                   Color="Color.Primary"
                   Icon="@Icons.Material.Filled.Add"
                   Href="@Routes.Admin.AddProduct" />
</MudToolBar>


@code {
    private IEnumerable<ProductRead>? products;

    protected override async Task OnInitializedAsync()
    {
        products = await CatalogApi.ReadProducts();
    }

    private async Task DeleteProduct(Guid id, string name)
    {
        if (await Dialog.ShowMessageBox("Delete", $"Do you want to delete product {name}?", "Yes", "No") == true)
        {
            await CatalogApi.DeleteProduct(id);
            products = await CatalogApi.ReadProducts();
        }
    }
}
